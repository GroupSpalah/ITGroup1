1) Please create an abstarct class Shape and two subclasses Square and Circle. Replace code in method drawShape()
according to principles of polymorphism. Please propose the other solutions for improving quality of the code.

https://ru.wikipedia.org
/wiki/SOLID_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)

enum ShareType {
    SQUARE, CIRCLE
}

class Shape {
    private ShareType shareType;

    //other fields


    public Shape(ShareType shareType) {
        this.shareType = shareType;
    }

    public ShareType getShareType() {
        return shareType;
    }

    public void drawSquare() {
        //Code for drawing square
    }

    public void drawCircle() {
        //Code for drawing square
    }

    public void drawShape() {
        if (getShareType() == ShareType.SQUARE) {
            drawSquare();
        } else {
            drawCircle();
        }
    }

    //others methods
}

2)  Please model in classes domain described below.
    Using of interfaces, abstract classes & inheritances & abstract methods are highly recommended.

    Vehicles. There are different kind of vehicles - cars, trucks, buses.
    Cars could be different kind as well - suv, racing car, compact car.

    Vehicle runs on some fuel - gasoline, diesel, electricity.
    Its possible to fuel vehicle. If wrong fuel is used - car should break. (message)
    All vehicles can do some actions: like accelerate or brake.

    Each and every vehicle has wheels. But trucks & buses has more wheels than cars.
    It should be possible to request number of wheels from car.

    P.S. BONUS - for implementing plug-in hybrid car: it runs on gasoline. But could also be charged by electricity.

    4 PRINCIPE SOLID