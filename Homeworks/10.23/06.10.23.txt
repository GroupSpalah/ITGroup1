    1) Добавить функционал добавления к строке @@ и {} к шаблону Декоратор, чтобы получить строку @{"Hello"}@

2) Imagine you have сhain of stores. You need to implement discount system for people
   in some special events of a year like New Year.

   In this task we'll need help of Strategy pattern.
   First of all, you need to create `DiscountService` interface
   with method `getDiscount()` with return type `double`.

   You must create its implementations (with the same names) with such discounts:

   | Implementation name |Discount |
   | :---: | :---: |
   | DefaultDiscountService| 0 |
   | NewYearDiscountService| 20 |
   | BirthdayDiscountService| 33 |
   | BlackFridayDiscountService| 45 |

   Each of this implementation in result of execution of method
   `getDiscount()` must return discount according to table above.

   The last step will be creation of class called `DiscountStrategy`. It must have
   method `getDiscountServiceBySpecialEvent(String specialEvent)` with return type `DiscountService`
   where `specialEvent` can have such values: `"Birthday"`, `"Black Friday"`, `"New Year"`.

   Using `specialEvent`, you must write code that defines `DiscountService` implementation.

   In case if passed `specialEvent` doesn't have specific implementation
   you must return `DefaultDiscountService` by default.

   3) Практика на работу с интерфейсами
      Создать приложение, которое использует паттерн Команда

      Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты,
      позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь,
      логировать их, а также поддерживать отмену операций.

      Реализуйте интерфейс Command:

      public interface Command {
       void execute(String... args);
      }
      для поддержки следующих команд:

      help

      Выводит на сообщение Help executed

      echo <text>

      Выводит на консоль строку

      Например:

      echo Hello World

      выведет:

      Hello World

      now

      Выводит на экран текущую дату в миллисекундах начиная с 1 января 1970 года.
      Для получения времени используйте метод System.currentTimeMillis()

      exit

      Выводит на экран строку Goodbye! и завершает работу программы.

      Для завершения программы используйте метод System.exit(0).

      Каждая реализация - это отдельный класс реализующий интерфейс Command.

      В случае если команда неизвестна, то необходимо вывести на экран сообщение Error.

      Пример работы программы:

      >>> help
      Help executed
      >>> now
      1604586299340
      >>> echo Hello World
      Hello World
      >>> exit
      Goodbye!